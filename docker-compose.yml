version: "2.4"

x-env:
  &env
  - DEBUG
  - SERVER_URL
  - SERVER_SECRET
  - TELEGRAM_AUTH_TOKEN
  - TELEGRAM_SECRET
  - DATABASE_URL
  - CACHE_URL

services:
  frontend:
    build:
      context: frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
    healthcheck:
      test: wget -q -O - bacon.localhost/healthz
      interval: 3s
      timeout: 2s
      retries: 2

  backend:
    build:
      context: backend
    environment: *env
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    depends_on:
      migrate_db:
        condition: service_completed_successfully
    volumes:
      - ./backend:/app/backend
    healthcheck:
      test: curl localhost:8000/healthz/ || exit 1
      interval: 3s
      timeout: 2s
      retries: 2

  worker:
    build:
      context: backend
    environment: *env
    command: ["celery", "--app", "web", "worker", "--concurrency", "1", "--beat", "--loglevel", "INFO"]
    volumes:
      - ./backend:/app/backend
    depends_on:
      migrate_db:
        condition: service_completed_successfully
      cache:
        condition: service_healthy
    healthcheck:
      test: celery -A web inspect ping
      interval: 10s
      timeout: 5s
      retries: 1

  db:
    image: postgres:14.5-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=$DB_PASSWORD
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --username $DB_USER || exit 1
      interval: 3s
      timeout: 3s
      retries: 3

  cache:
    image: redis:7.0.9-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping | grep PONG
      interval: 3s
      timeout: 3s
      retries: 3

  migrate_db:
    build:
      context: backend
    environment: *env
    command: ["python", "manage.py", "migrate"]
    volumes:
      - ./backend:/app/backend
    depends_on:
      db:
        condition: service_healthy

volumes:
  caddy_data:
  caddy_config:
  pg_data:
  redis_data:
