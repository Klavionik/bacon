version: "2.4"

x-env:
  &env
  - DEBUG
  - HOST
  - TUNNEL_URL
  - CORS_ALLOWED_ORIGIN
  - SERVER_SECRET
  - PROXY
  - BOT_TOKEN
  - SENTRY_DSN
  - LOGTAIL_TOKEN
  - DB_NAME
  - DB_USER
  - DB_PASSWORD

x-build-backend:
  &build-backend
  context: backend
  args:
    INSTALL_GROUPS: "main"

services:
  frontend:
    build:
      context: frontend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data

  backend:
    build: *build-backend
    environment: *env
    command: ["python", "manage.py", "runserver", "0.0.0.0:8099"]
    depends_on:
      migrate_db:
        condition: service_completed_successfully
    volumes:
      - ./backend:/app/backend
    healthcheck:
      test: curl localhost:8099/health || exit 1
      interval: 3s
      timeout: 2s
      retries: 3

#  watcher:
#    build: *build-backend
#    environment: *env
#    command: ["huey_consumer.py", "--scheduler-interval", "60", "watcher.main.huey"]
#    volumes:
#      - ./backend/src:/app/backend
#    depends_on:
#      migrate_db:
#        condition: service_completed_successfully

  db:
    image: postgres:14.5-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=$DB_PASSWORD
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --username $DB_USER || exit 1
      interval: 3s
      timeout: 3s
      retries: 5

  cache:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  migrate_db:
    build: *build-backend
    environment: *env
    command: ["python", "manage.py", "migrate"]
    volumes:
      - ./backend:/app/backend
    depends_on:
      db:
        condition: service_healthy

volumes:
  caddy_data:
  caddy_config:
  pg_data:
  redis_data:
